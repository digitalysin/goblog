// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package nats

import (
	"github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConnection creates a new instance of MockConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnection {
	mock := &MockConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConnection is an autogenerated mock type for the Connection type
type MockConnection struct {
	mock.Mock
}

type MockConnection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnection) EXPECT() *MockConnection_Expecter {
	return &MockConnection_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockConnection
func (_mock *MockConnection) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnection_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConnection_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConnection_Expecter) Close() *MockConnection_Close_Call {
	return &MockConnection_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConnection_Close_Call) Run(run func()) *MockConnection_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnection_Close_Call) Return(err error) *MockConnection_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnection_Close_Call) RunAndReturn(run func() error) *MockConnection_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function for the type MockConnection
func (_mock *MockConnection) Flush() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnection_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockConnection_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *MockConnection_Expecter) Flush() *MockConnection_Flush_Call {
	return &MockConnection_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *MockConnection_Flush_Call) Run(run func()) *MockConnection_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnection_Flush_Call) Return(err error) *MockConnection_Flush_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnection_Flush_Call) RunAndReturn(run func() error) *MockConnection_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockConnection
func (_mock *MockConnection) Ping() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnection_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockConnection_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *MockConnection_Expecter) Ping() *MockConnection_Ping_Call {
	return &MockConnection_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *MockConnection_Ping_Call) Run(run func()) *MockConnection_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnection_Ping_Call) Return(err error) *MockConnection_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnection_Ping_Call) RunAndReturn(run func() error) *MockConnection_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function for the type MockConnection
func (_mock *MockConnection) Publish(subject string, data []byte) error {
	ret := _mock.Called(subject, data)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = returnFunc(subject, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnection_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockConnection_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - subject
//   - data
func (_e *MockConnection_Expecter) Publish(subject interface{}, data interface{}) *MockConnection_Publish_Call {
	return &MockConnection_Publish_Call{Call: _e.mock.On("Publish", subject, data)}
}

func (_c *MockConnection_Publish_Call) Run(run func(subject string, data []byte)) *MockConnection_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockConnection_Publish_Call) Return(err error) *MockConnection_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnection_Publish_Call) RunAndReturn(run func(subject string, data []byte) error) *MockConnection_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// QueueSubscribe provides a mock function for the type MockConnection
func (_mock *MockConnection) QueueSubscribe(subject string, group string, callback nats.MsgHandler) (*nats.Subscription, error) {
	ret := _mock.Called(subject, group, callback)

	if len(ret) == 0 {
		panic("no return value specified for QueueSubscribe")
	}

	var r0 *nats.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, nats.MsgHandler) (*nats.Subscription, error)); ok {
		return returnFunc(subject, group, callback)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, nats.MsgHandler) *nats.Subscription); ok {
		r0 = returnFunc(subject, group, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, nats.MsgHandler) error); ok {
		r1 = returnFunc(subject, group, callback)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConnection_QueueSubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueSubscribe'
type MockConnection_QueueSubscribe_Call struct {
	*mock.Call
}

// QueueSubscribe is a helper method to define mock.On call
//   - subject
//   - group
//   - callback
func (_e *MockConnection_Expecter) QueueSubscribe(subject interface{}, group interface{}, callback interface{}) *MockConnection_QueueSubscribe_Call {
	return &MockConnection_QueueSubscribe_Call{Call: _e.mock.On("QueueSubscribe", subject, group, callback)}
}

func (_c *MockConnection_QueueSubscribe_Call) Run(run func(subject string, group string, callback nats.MsgHandler)) *MockConnection_QueueSubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(nats.MsgHandler))
	})
	return _c
}

func (_c *MockConnection_QueueSubscribe_Call) Return(subscription *nats.Subscription, err error) *MockConnection_QueueSubscribe_Call {
	_c.Call.Return(subscription, err)
	return _c
}

func (_c *MockConnection_QueueSubscribe_Call) RunAndReturn(run func(subject string, group string, callback nats.MsgHandler) (*nats.Subscription, error)) *MockConnection_QueueSubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type MockConnection
func (_mock *MockConnection) Subscribe(subject string, callback nats.MsgHandler) (*nats.Subscription, error) {
	ret := _mock.Called(subject, callback)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 *nats.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, nats.MsgHandler) (*nats.Subscription, error)); ok {
		return returnFunc(subject, callback)
	}
	if returnFunc, ok := ret.Get(0).(func(string, nats.MsgHandler) *nats.Subscription); ok {
		r0 = returnFunc(subject, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, nats.MsgHandler) error); ok {
		r1 = returnFunc(subject, callback)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConnection_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockConnection_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - subject
//   - callback
func (_e *MockConnection_Expecter) Subscribe(subject interface{}, callback interface{}) *MockConnection_Subscribe_Call {
	return &MockConnection_Subscribe_Call{Call: _e.mock.On("Subscribe", subject, callback)}
}

func (_c *MockConnection_Subscribe_Call) Run(run func(subject string, callback nats.MsgHandler)) *MockConnection_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(nats.MsgHandler))
	})
	return _c
}

func (_c *MockConnection_Subscribe_Call) Return(subscription *nats.Subscription, err error) *MockConnection_Subscribe_Call {
	_c.Call.Return(subscription, err)
	return _c
}

func (_c *MockConnection_Subscribe_Call) RunAndReturn(run func(subject string, callback nats.MsgHandler) (*nats.Subscription, error)) *MockConnection_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}
