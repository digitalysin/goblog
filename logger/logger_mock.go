// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package logger

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function for the type MockLogger
func (_mock *MockLogger) Debug(ifaceVals ...interface{}) {
	if len(ifaceVals) > 0 {
		_mock.Called(ifaceVals)
	} else {
		_mock.Called()
	}

	return
}

// MockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - ifaceVals
func (_e *MockLogger_Expecter) Debug(ifaceVals ...interface{}) *MockLogger_Debug_Call {
	return &MockLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{}, ifaceVals...)...)}
}

func (_c *MockLogger_Debug_Call) Run(run func(ifaceVals ...interface{})) *MockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Debug_Call) Return() *MockLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debug_Call) RunAndReturn(run func(ifaceVals ...interface{})) *MockLogger_Debug_Call {
	_c.Run(run)
	return _c
}

// Debugf provides a mock function for the type MockLogger
func (_mock *MockLogger) Debugf(s string, ifaceVals ...interface{}) {
	if len(ifaceVals) > 0 {
		_mock.Called(s, ifaceVals)
	} else {
		_mock.Called(s)
	}

	return
}

// MockLogger_Debugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugf'
type MockLogger_Debugf_Call struct {
	*mock.Call
}

// Debugf is a helper method to define mock.On call
//   - s
//   - ifaceVals
func (_e *MockLogger_Expecter) Debugf(s interface{}, ifaceVals ...interface{}) *MockLogger_Debugf_Call {
	return &MockLogger_Debugf_Call{Call: _e.mock.On("Debugf",
		append([]interface{}{s}, ifaceVals...)...)}
}

func (_c *MockLogger_Debugf_Call) Run(run func(s string, ifaceVals ...interface{})) *MockLogger_Debugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Debugf_Call) Return() *MockLogger_Debugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debugf_Call) RunAndReturn(run func(s string, ifaceVals ...interface{})) *MockLogger_Debugf_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function for the type MockLogger
func (_mock *MockLogger) Error(ifaceVals ...interface{}) {
	if len(ifaceVals) > 0 {
		_mock.Called(ifaceVals)
	} else {
		_mock.Called()
	}

	return
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - ifaceVals
func (_e *MockLogger_Expecter) Error(ifaceVals ...interface{}) *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{}, ifaceVals...)...)}
}

func (_c *MockLogger_Error_Call) Run(run func(ifaceVals ...interface{})) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return() *MockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Error_Call) RunAndReturn(run func(ifaceVals ...interface{})) *MockLogger_Error_Call {
	_c.Run(run)
	return _c
}

// Errorf provides a mock function for the type MockLogger
func (_mock *MockLogger) Errorf(s string, ifaceVals ...interface{}) {
	if len(ifaceVals) > 0 {
		_mock.Called(s, ifaceVals)
	} else {
		_mock.Called(s)
	}

	return
}

// MockLogger_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type MockLogger_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - s
//   - ifaceVals
func (_e *MockLogger_Expecter) Errorf(s interface{}, ifaceVals ...interface{}) *MockLogger_Errorf_Call {
	return &MockLogger_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{s}, ifaceVals...)...)}
}

func (_c *MockLogger_Errorf_Call) Run(run func(s string, ifaceVals ...interface{})) *MockLogger_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Errorf_Call) Return() *MockLogger_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Errorf_Call) RunAndReturn(run func(s string, ifaceVals ...interface{})) *MockLogger_Errorf_Call {
	_c.Run(run)
	return _c
}

// Fatal provides a mock function for the type MockLogger
func (_mock *MockLogger) Fatal(ifaceVals ...interface{}) {
	if len(ifaceVals) > 0 {
		_mock.Called(ifaceVals)
	} else {
		_mock.Called()
	}

	return
}

// MockLogger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type MockLogger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - ifaceVals
func (_e *MockLogger_Expecter) Fatal(ifaceVals ...interface{}) *MockLogger_Fatal_Call {
	return &MockLogger_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{}, ifaceVals...)...)}
}

func (_c *MockLogger_Fatal_Call) Run(run func(ifaceVals ...interface{})) *MockLogger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Fatal_Call) Return() *MockLogger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Fatal_Call) RunAndReturn(run func(ifaceVals ...interface{})) *MockLogger_Fatal_Call {
	_c.Run(run)
	return _c
}

// Fatalf provides a mock function for the type MockLogger
func (_mock *MockLogger) Fatalf(s string, ifaceVals ...interface{}) {
	if len(ifaceVals) > 0 {
		_mock.Called(s, ifaceVals)
	} else {
		_mock.Called(s)
	}

	return
}

// MockLogger_Fatalf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalf'
type MockLogger_Fatalf_Call struct {
	*mock.Call
}

// Fatalf is a helper method to define mock.On call
//   - s
//   - ifaceVals
func (_e *MockLogger_Expecter) Fatalf(s interface{}, ifaceVals ...interface{}) *MockLogger_Fatalf_Call {
	return &MockLogger_Fatalf_Call{Call: _e.mock.On("Fatalf",
		append([]interface{}{s}, ifaceVals...)...)}
}

func (_c *MockLogger_Fatalf_Call) Run(run func(s string, ifaceVals ...interface{})) *MockLogger_Fatalf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Fatalf_Call) Return() *MockLogger_Fatalf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Fatalf_Call) RunAndReturn(run func(s string, ifaceVals ...interface{})) *MockLogger_Fatalf_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function for the type MockLogger
func (_mock *MockLogger) Info(ifaceVals ...interface{}) {
	if len(ifaceVals) > 0 {
		_mock.Called(ifaceVals)
	} else {
		_mock.Called()
	}

	return
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - ifaceVals
func (_e *MockLogger_Expecter) Info(ifaceVals ...interface{}) *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{}, ifaceVals...)...)}
}

func (_c *MockLogger_Info_Call) Run(run func(ifaceVals ...interface{})) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return() *MockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Info_Call) RunAndReturn(run func(ifaceVals ...interface{})) *MockLogger_Info_Call {
	_c.Run(run)
	return _c
}

// Infof provides a mock function for the type MockLogger
func (_mock *MockLogger) Infof(s string, ifaceVals ...interface{}) {
	if len(ifaceVals) > 0 {
		_mock.Called(s, ifaceVals)
	} else {
		_mock.Called(s)
	}

	return
}

// MockLogger_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type MockLogger_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - s
//   - ifaceVals
func (_e *MockLogger_Expecter) Infof(s interface{}, ifaceVals ...interface{}) *MockLogger_Infof_Call {
	return &MockLogger_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{s}, ifaceVals...)...)}
}

func (_c *MockLogger_Infof_Call) Run(run func(s string, ifaceVals ...interface{})) *MockLogger_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Infof_Call) Return() *MockLogger_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Infof_Call) RunAndReturn(run func(s string, ifaceVals ...interface{})) *MockLogger_Infof_Call {
	_c.Run(run)
	return _c
}

// Instance provides a mock function for the type MockLogger
func (_mock *MockLogger) Instance() interface{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Instance")
	}

	var r0 interface{}
	if returnFunc, ok := ret.Get(0).(func() interface{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	return r0
}

// MockLogger_Instance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Instance'
type MockLogger_Instance_Call struct {
	*mock.Call
}

// Instance is a helper method to define mock.On call
func (_e *MockLogger_Expecter) Instance() *MockLogger_Instance_Call {
	return &MockLogger_Instance_Call{Call: _e.mock.On("Instance")}
}

func (_c *MockLogger_Instance_Call) Run(run func()) *MockLogger_Instance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogger_Instance_Call) Return(ifaceVal interface{}) *MockLogger_Instance_Call {
	_c.Call.Return(ifaceVal)
	return _c
}

func (_c *MockLogger_Instance_Call) RunAndReturn(run func() interface{}) *MockLogger_Instance_Call {
	_c.Call.Return(run)
	return _c
}

// Print provides a mock function for the type MockLogger
func (_mock *MockLogger) Print(ifaceVals ...interface{}) {
	if len(ifaceVals) > 0 {
		_mock.Called(ifaceVals)
	} else {
		_mock.Called()
	}

	return
}

// MockLogger_Print_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Print'
type MockLogger_Print_Call struct {
	*mock.Call
}

// Print is a helper method to define mock.On call
//   - ifaceVals
func (_e *MockLogger_Expecter) Print(ifaceVals ...interface{}) *MockLogger_Print_Call {
	return &MockLogger_Print_Call{Call: _e.mock.On("Print",
		append([]interface{}{}, ifaceVals...)...)}
}

func (_c *MockLogger_Print_Call) Run(run func(ifaceVals ...interface{})) *MockLogger_Print_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Print_Call) Return() *MockLogger_Print_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Print_Call) RunAndReturn(run func(ifaceVals ...interface{})) *MockLogger_Print_Call {
	_c.Run(run)
	return _c
}

// Printf provides a mock function for the type MockLogger
func (_mock *MockLogger) Printf(s string, ifaceVals ...interface{}) {
	if len(ifaceVals) > 0 {
		_mock.Called(s, ifaceVals)
	} else {
		_mock.Called(s)
	}

	return
}

// MockLogger_Printf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Printf'
type MockLogger_Printf_Call struct {
	*mock.Call
}

// Printf is a helper method to define mock.On call
//   - s
//   - ifaceVals
func (_e *MockLogger_Expecter) Printf(s interface{}, ifaceVals ...interface{}) *MockLogger_Printf_Call {
	return &MockLogger_Printf_Call{Call: _e.mock.On("Printf",
		append([]interface{}{s}, ifaceVals...)...)}
}

func (_c *MockLogger_Printf_Call) Run(run func(s string, ifaceVals ...interface{})) *MockLogger_Printf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Printf_Call) Return() *MockLogger_Printf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Printf_Call) RunAndReturn(run func(s string, ifaceVals ...interface{})) *MockLogger_Printf_Call {
	_c.Run(run)
	return _c
}

// Println provides a mock function for the type MockLogger
func (_mock *MockLogger) Println(ifaceVals ...interface{}) {
	if len(ifaceVals) > 0 {
		_mock.Called(ifaceVals)
	} else {
		_mock.Called()
	}

	return
}

// MockLogger_Println_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Println'
type MockLogger_Println_Call struct {
	*mock.Call
}

// Println is a helper method to define mock.On call
//   - ifaceVals
func (_e *MockLogger_Expecter) Println(ifaceVals ...interface{}) *MockLogger_Println_Call {
	return &MockLogger_Println_Call{Call: _e.mock.On("Println",
		append([]interface{}{}, ifaceVals...)...)}
}

func (_c *MockLogger_Println_Call) Run(run func(ifaceVals ...interface{})) *MockLogger_Println_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Println_Call) Return() *MockLogger_Println_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Println_Call) RunAndReturn(run func(ifaceVals ...interface{})) *MockLogger_Println_Call {
	_c.Run(run)
	return _c
}

// Warning provides a mock function for the type MockLogger
func (_mock *MockLogger) Warning(ifaceVals ...interface{}) {
	if len(ifaceVals) > 0 {
		_mock.Called(ifaceVals)
	} else {
		_mock.Called()
	}

	return
}

// MockLogger_Warning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warning'
type MockLogger_Warning_Call struct {
	*mock.Call
}

// Warning is a helper method to define mock.On call
//   - ifaceVals
func (_e *MockLogger_Expecter) Warning(ifaceVals ...interface{}) *MockLogger_Warning_Call {
	return &MockLogger_Warning_Call{Call: _e.mock.On("Warning",
		append([]interface{}{}, ifaceVals...)...)}
}

func (_c *MockLogger_Warning_Call) Run(run func(ifaceVals ...interface{})) *MockLogger_Warning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Warning_Call) Return() *MockLogger_Warning_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warning_Call) RunAndReturn(run func(ifaceVals ...interface{})) *MockLogger_Warning_Call {
	_c.Run(run)
	return _c
}

// Warningf provides a mock function for the type MockLogger
func (_mock *MockLogger) Warningf(s string, ifaceVals ...interface{}) {
	if len(ifaceVals) > 0 {
		_mock.Called(s, ifaceVals)
	} else {
		_mock.Called(s)
	}

	return
}

// MockLogger_Warningf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warningf'
type MockLogger_Warningf_Call struct {
	*mock.Call
}

// Warningf is a helper method to define mock.On call
//   - s
//   - ifaceVals
func (_e *MockLogger_Expecter) Warningf(s interface{}, ifaceVals ...interface{}) *MockLogger_Warningf_Call {
	return &MockLogger_Warningf_Call{Call: _e.mock.On("Warningf",
		append([]interface{}{s}, ifaceVals...)...)}
}

func (_c *MockLogger_Warningf_Call) Run(run func(s string, ifaceVals ...interface{})) *MockLogger_Warningf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Warningf_Call) Return() *MockLogger_Warningf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warningf_Call) RunAndReturn(run func(s string, ifaceVals ...interface{})) *MockLogger_Warningf_Call {
	_c.Run(run)
	return _c
}
