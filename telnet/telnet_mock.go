// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package telnet

import (
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTelnet creates a new instance of MockTelnet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTelnet(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTelnet {
	mock := &MockTelnet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTelnet is an autogenerated mock type for the Telnet type
type MockTelnet struct {
	mock.Mock
}

type MockTelnet_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTelnet) EXPECT() *MockTelnet_Expecter {
	return &MockTelnet_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockTelnet
func (_mock *MockTelnet) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTelnet_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockTelnet_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockTelnet_Expecter) Close() *MockTelnet_Close_Call {
	return &MockTelnet_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockTelnet_Close_Call) Run(run func()) *MockTelnet_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTelnet_Close_Call) Return(err error) *MockTelnet_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTelnet_Close_Call) RunAndReturn(run func() error) *MockTelnet_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockTelnet
func (_mock *MockTelnet) Run(input io.Reader, output io.Writer) error {
	ret := _mock.Called(input, output)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(io.Reader, io.Writer) error); ok {
		r0 = returnFunc(input, output)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTelnet_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockTelnet_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - input
//   - output
func (_e *MockTelnet_Expecter) Run(input interface{}, output interface{}) *MockTelnet_Run_Call {
	return &MockTelnet_Run_Call{Call: _e.mock.On("Run", input, output)}
}

func (_c *MockTelnet_Run_Call) Run(run func(input io.Reader, output io.Writer)) *MockTelnet_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader), args[1].(io.Writer))
	})
	return _c
}

func (_c *MockTelnet_Run_Call) Return(err error) *MockTelnet_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTelnet_Run_Call) RunAndReturn(run func(input io.Reader, output io.Writer) error) *MockTelnet_Run_Call {
	_c.Call.Return(run)
	return _c
}
