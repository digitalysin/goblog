// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package crypto

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockCrypto creates a new instance of MockCrypto. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCrypto(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCrypto {
	mock := &MockCrypto{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCrypto is an autogenerated mock type for the Crypto type
type MockCrypto struct {
	mock.Mock
}

type MockCrypto_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCrypto) EXPECT() *MockCrypto_Expecter {
	return &MockCrypto_Expecter{mock: &_m.Mock}
}

// DecryptAes provides a mock function for the type MockCrypto
func (_mock *MockCrypto) DecryptAes(text string) ([]byte, error) {
	ret := _mock.Called(text)

	if len(ret) == 0 {
		panic("no return value specified for DecryptAes")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return returnFunc(text)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = returnFunc(text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(text)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCrypto_DecryptAes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecryptAes'
type MockCrypto_DecryptAes_Call struct {
	*mock.Call
}

// DecryptAes is a helper method to define mock.On call
//   - text
func (_e *MockCrypto_Expecter) DecryptAes(text interface{}) *MockCrypto_DecryptAes_Call {
	return &MockCrypto_DecryptAes_Call{Call: _e.mock.On("DecryptAes", text)}
}

func (_c *MockCrypto_DecryptAes_Call) Run(run func(text string)) *MockCrypto_DecryptAes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCrypto_DecryptAes_Call) Return(bytes []byte, err error) *MockCrypto_DecryptAes_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockCrypto_DecryptAes_Call) RunAndReturn(run func(text string) ([]byte, error)) *MockCrypto_DecryptAes_Call {
	_c.Call.Return(run)
	return _c
}

// EncryptAes provides a mock function for the type MockCrypto
func (_mock *MockCrypto) EncryptAes(text string) ([]byte, error) {
	ret := _mock.Called(text)

	if len(ret) == 0 {
		panic("no return value specified for EncryptAes")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return returnFunc(text)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = returnFunc(text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(text)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCrypto_EncryptAes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncryptAes'
type MockCrypto_EncryptAes_Call struct {
	*mock.Call
}

// EncryptAes is a helper method to define mock.On call
//   - text
func (_e *MockCrypto_Expecter) EncryptAes(text interface{}) *MockCrypto_EncryptAes_Call {
	return &MockCrypto_EncryptAes_Call{Call: _e.mock.On("EncryptAes", text)}
}

func (_c *MockCrypto_EncryptAes_Call) Run(run func(text string)) *MockCrypto_EncryptAes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCrypto_EncryptAes_Call) Return(bytes []byte, err error) *MockCrypto_EncryptAes_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockCrypto_EncryptAes_Call) RunAndReturn(run func(text string) ([]byte, error)) *MockCrypto_EncryptAes_Call {
	_c.Call.Return(run)
	return _c
}
