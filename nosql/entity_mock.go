// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package nosql

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockEntity creates a new instance of MockEntity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEntity[ID any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEntity[ID] {
	mock := &MockEntity[ID]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEntity is an autogenerated mock type for the Entity type
type MockEntity[ID any] struct {
	mock.Mock
}

type MockEntity_Expecter[ID any] struct {
	mock *mock.Mock
}

func (_m *MockEntity[ID]) EXPECT() *MockEntity_Expecter[ID] {
	return &MockEntity_Expecter[ID]{mock: &_m.Mock}
}

// CollectionName provides a mock function for the type MockEntity
func (_mock *MockEntity[ID]) CollectionName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CollectionName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEntity_CollectionName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectionName'
type MockEntity_CollectionName_Call[ID any] struct {
	*mock.Call
}

// CollectionName is a helper method to define mock.On call
func (_e *MockEntity_Expecter[ID]) CollectionName() *MockEntity_CollectionName_Call[ID] {
	return &MockEntity_CollectionName_Call[ID]{Call: _e.mock.On("CollectionName")}
}

func (_c *MockEntity_CollectionName_Call[ID]) Run(run func()) *MockEntity_CollectionName_Call[ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEntity_CollectionName_Call[ID]) Return(s string) *MockEntity_CollectionName_Call[ID] {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEntity_CollectionName_Call[ID]) RunAndReturn(run func() string) *MockEntity_CollectionName_Call[ID] {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function for the type MockEntity
func (_mock *MockEntity[ID]) GetID() ID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 ID
	if returnFunc, ok := ret.Get(0).(func() ID); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ID)
		}
	}
	return r0
}

// MockEntity_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type MockEntity_GetID_Call[ID any] struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *MockEntity_Expecter[ID]) GetID() *MockEntity_GetID_Call[ID] {
	return &MockEntity_GetID_Call[ID]{Call: _e.mock.On("GetID")}
}

func (_c *MockEntity_GetID_Call[ID]) Run(run func()) *MockEntity_GetID_Call[ID] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEntity_GetID_Call[ID]) Return(v ID) *MockEntity_GetID_Call[ID] {
	_c.Call.Return(v)
	return _c
}

func (_c *MockEntity_GetID_Call[ID]) RunAndReturn(run func() ID) *MockEntity_GetID_Call[ID] {
	_c.Call.Return(run)
	return _c
}
