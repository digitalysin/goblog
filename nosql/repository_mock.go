// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package nosql

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository[ID any, E Entity[ID], T ~[]E](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository[ID, E, T] {
	mock := &MockRepository[ID, E, T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository[ID any, E Entity[ID], T ~[]E] struct {
	mock.Mock
}

type MockRepository_Expecter[ID any, E Entity[ID], T ~[]E] struct {
	mock *mock.Mock
}

func (_m *MockRepository[ID, E, T]) EXPECT() *MockRepository_Expecter[ID, E, T] {
	return &MockRepository_Expecter[ID, E, T]{mock: &_m.Mock}
}

// Create provides a mock function for the type MockRepository
func (_mock *MockRepository[ID, E, T]) Create(ctx context.Context, entity E) (E, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 E
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, E) (E, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, E) E); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(E)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, E) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call[ID any, E Entity[ID], T ~[]E] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - entity
func (_e *MockRepository_Expecter[ID, E, T]) Create(ctx interface{}, entity interface{}) *MockRepository_Create_Call[ID, E, T] {
	return &MockRepository_Create_Call[ID, E, T]{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockRepository_Create_Call[ID, E, T]) Run(run func(ctx context.Context, entity E)) *MockRepository_Create_Call[ID, E, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(E))
	})
	return _c
}

func (_c *MockRepository_Create_Call[ID, E, T]) Return(v E, err error) *MockRepository_Create_Call[ID, E, T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockRepository_Create_Call[ID, E, T]) RunAndReturn(run func(ctx context.Context, entity E) (E, error)) *MockRepository_Create_Call[ID, E, T] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockRepository
func (_mock *MockRepository[ID, E, T]) Delete(ctx context.Context, e E) error {
	ret := _mock.Called(ctx, e)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, E) error); ok {
		r0 = returnFunc(ctx, e)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepository_Delete_Call[ID any, E Entity[ID], T ~[]E] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - e
func (_e *MockRepository_Expecter[ID, E, T]) Delete(ctx interface{}, e interface{}) *MockRepository_Delete_Call[ID, E, T] {
	return &MockRepository_Delete_Call[ID, E, T]{Call: _e.mock.On("Delete", ctx, e)}
}

func (_c *MockRepository_Delete_Call[ID, E, T]) Run(run func(ctx context.Context, e E)) *MockRepository_Delete_Call[ID, E, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(E))
	})
	return _c
}

func (_c *MockRepository_Delete_Call[ID, E, T]) Return(err error) *MockRepository_Delete_Call[ID, E, T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Delete_Call[ID, E, T]) RunAndReturn(run func(ctx context.Context, e E) error) *MockRepository_Delete_Call[ID, E, T] {
	_c.Call.Return(run)
	return _c
}

// DeleteMany provides a mock function for the type MockRepository
func (_mock *MockRepository[ID, E, T]) DeleteMany(ctx context.Context, filter interface{}) error {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMany'
type MockRepository_DeleteMany_Call[ID any, E Entity[ID], T ~[]E] struct {
	*mock.Call
}

// DeleteMany is a helper method to define mock.On call
//   - ctx
//   - filter
func (_e *MockRepository_Expecter[ID, E, T]) DeleteMany(ctx interface{}, filter interface{}) *MockRepository_DeleteMany_Call[ID, E, T] {
	return &MockRepository_DeleteMany_Call[ID, E, T]{Call: _e.mock.On("DeleteMany", ctx, filter)}
}

func (_c *MockRepository_DeleteMany_Call[ID, E, T]) Run(run func(ctx context.Context, filter interface{})) *MockRepository_DeleteMany_Call[ID, E, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockRepository_DeleteMany_Call[ID, E, T]) Return(err error) *MockRepository_DeleteMany_Call[ID, E, T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteMany_Call[ID, E, T]) RunAndReturn(run func(ctx context.Context, filter interface{}) error) *MockRepository_DeleteMany_Call[ID, E, T] {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function for the type MockRepository
func (_mock *MockRepository[ID, E, T]) FindByID(ctx context.Context, id ID) (E, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 E
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ID) (E, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ID) E); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(E)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockRepository_FindByID_Call[ID any, E Entity[ID], T ~[]E] struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockRepository_Expecter[ID, E, T]) FindByID(ctx interface{}, id interface{}) *MockRepository_FindByID_Call[ID, E, T] {
	return &MockRepository_FindByID_Call[ID, E, T]{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockRepository_FindByID_Call[ID, E, T]) Run(run func(ctx context.Context, id ID)) *MockRepository_FindByID_Call[ID, E, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ID))
	})
	return _c
}

func (_c *MockRepository_FindByID_Call[ID, E, T]) Return(v E, err error) *MockRepository_FindByID_Call[ID, E, T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockRepository_FindByID_Call[ID, E, T]) RunAndReturn(run func(ctx context.Context, id ID) (E, error)) *MockRepository_FindByID_Call[ID, E, T] {
	_c.Call.Return(run)
	return _c
}

// FindMany provides a mock function for the type MockRepository
func (_mock *MockRepository[ID, E, T]) FindMany(ctx context.Context, filter interface{}) (T, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindMany")
	}

	var r0 T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}) (T, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}) T); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_FindMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMany'
type MockRepository_FindMany_Call[ID any, E Entity[ID], T ~[]E] struct {
	*mock.Call
}

// FindMany is a helper method to define mock.On call
//   - ctx
//   - filter
func (_e *MockRepository_Expecter[ID, E, T]) FindMany(ctx interface{}, filter interface{}) *MockRepository_FindMany_Call[ID, E, T] {
	return &MockRepository_FindMany_Call[ID, E, T]{Call: _e.mock.On("FindMany", ctx, filter)}
}

func (_c *MockRepository_FindMany_Call[ID, E, T]) Run(run func(ctx context.Context, filter interface{})) *MockRepository_FindMany_Call[ID, E, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockRepository_FindMany_Call[ID, E, T]) Return(v T, err error) *MockRepository_FindMany_Call[ID, E, T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockRepository_FindMany_Call[ID, E, T]) RunAndReturn(run func(ctx context.Context, filter interface{}) (T, error)) *MockRepository_FindMany_Call[ID, E, T] {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function for the type MockRepository
func (_mock *MockRepository[ID, E, T]) FindOne(ctx context.Context, filter interface{}) (E, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 E
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}) (E, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}) E); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(E)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockRepository_FindOne_Call[ID any, E Entity[ID], T ~[]E] struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx
//   - filter
func (_e *MockRepository_Expecter[ID, E, T]) FindOne(ctx interface{}, filter interface{}) *MockRepository_FindOne_Call[ID, E, T] {
	return &MockRepository_FindOne_Call[ID, E, T]{Call: _e.mock.On("FindOne", ctx, filter)}
}

func (_c *MockRepository_FindOne_Call[ID, E, T]) Run(run func(ctx context.Context, filter interface{})) *MockRepository_FindOne_Call[ID, E, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockRepository_FindOne_Call[ID, E, T]) Return(v E, err error) *MockRepository_FindOne_Call[ID, E, T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockRepository_FindOne_Call[ID, E, T]) RunAndReturn(run func(ctx context.Context, filter interface{}) (E, error)) *MockRepository_FindOne_Call[ID, E, T] {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockRepository
func (_mock *MockRepository[ID, E, T]) Update(ctx context.Context, e E, update interface{}) error {
	ret := _mock.Called(ctx, e, update)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, E, interface{}) error); ok {
		r0 = returnFunc(ctx, e, update)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call[ID any, E Entity[ID], T ~[]E] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - e
//   - update
func (_e *MockRepository_Expecter[ID, E, T]) Update(ctx interface{}, e interface{}, update interface{}) *MockRepository_Update_Call[ID, E, T] {
	return &MockRepository_Update_Call[ID, E, T]{Call: _e.mock.On("Update", ctx, e, update)}
}

func (_c *MockRepository_Update_Call[ID, E, T]) Run(run func(ctx context.Context, e E, update interface{})) *MockRepository_Update_Call[ID, E, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(E), args[2].(interface{}))
	})
	return _c
}

func (_c *MockRepository_Update_Call[ID, E, T]) Return(err error) *MockRepository_Update_Call[ID, E, T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Update_Call[ID, E, T]) RunAndReturn(run func(ctx context.Context, e E, update interface{}) error) *MockRepository_Update_Call[ID, E, T] {
	_c.Call.Return(run)
	return _c
}
