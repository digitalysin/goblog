// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package nosql

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/v2/mongo"
)

// NewMockMongoRepository creates a new instance of MockMongoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMongoRepository[ID any, E Entity[ID], T ~[]E](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMongoRepository[ID, E, T] {
	mock := &MockMongoRepository[ID, E, T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMongoRepository is an autogenerated mock type for the MongoRepository type
type MockMongoRepository[ID any, E Entity[ID], T ~[]E] struct {
	mock.Mock
}

type MockMongoRepository_Expecter[ID any, E Entity[ID], T ~[]E] struct {
	mock *mock.Mock
}

func (_m *MockMongoRepository[ID, E, T]) EXPECT() *MockMongoRepository_Expecter[ID, E, T] {
	return &MockMongoRepository_Expecter[ID, E, T]{mock: &_m.Mock}
}

// Create provides a mock function for the type MockMongoRepository
func (_mock *MockMongoRepository[ID, E, T]) Create(ctx context.Context, entity E) (E, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 E
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, E) (E, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, E) E); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(E)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, E) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMongoRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMongoRepository_Create_Call[ID any, E Entity[ID], T ~[]E] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - entity
func (_e *MockMongoRepository_Expecter[ID, E, T]) Create(ctx interface{}, entity interface{}) *MockMongoRepository_Create_Call[ID, E, T] {
	return &MockMongoRepository_Create_Call[ID, E, T]{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockMongoRepository_Create_Call[ID, E, T]) Run(run func(ctx context.Context, entity E)) *MockMongoRepository_Create_Call[ID, E, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(E))
	})
	return _c
}

func (_c *MockMongoRepository_Create_Call[ID, E, T]) Return(v E, err error) *MockMongoRepository_Create_Call[ID, E, T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockMongoRepository_Create_Call[ID, E, T]) RunAndReturn(run func(ctx context.Context, entity E) (E, error)) *MockMongoRepository_Create_Call[ID, E, T] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockMongoRepository
func (_mock *MockMongoRepository[ID, E, T]) Delete(ctx context.Context, e E) error {
	ret := _mock.Called(ctx, e)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, E) error); ok {
		r0 = returnFunc(ctx, e)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMongoRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMongoRepository_Delete_Call[ID any, E Entity[ID], T ~[]E] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - e
func (_e *MockMongoRepository_Expecter[ID, E, T]) Delete(ctx interface{}, e interface{}) *MockMongoRepository_Delete_Call[ID, E, T] {
	return &MockMongoRepository_Delete_Call[ID, E, T]{Call: _e.mock.On("Delete", ctx, e)}
}

func (_c *MockMongoRepository_Delete_Call[ID, E, T]) Run(run func(ctx context.Context, e E)) *MockMongoRepository_Delete_Call[ID, E, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(E))
	})
	return _c
}

func (_c *MockMongoRepository_Delete_Call[ID, E, T]) Return(err error) *MockMongoRepository_Delete_Call[ID, E, T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMongoRepository_Delete_Call[ID, E, T]) RunAndReturn(run func(ctx context.Context, e E) error) *MockMongoRepository_Delete_Call[ID, E, T] {
	_c.Call.Return(run)
	return _c
}

// DeleteMany provides a mock function for the type MockMongoRepository
func (_mock *MockMongoRepository[ID, E, T]) DeleteMany(ctx context.Context, filter interface{}) error {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMongoRepository_DeleteMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMany'
type MockMongoRepository_DeleteMany_Call[ID any, E Entity[ID], T ~[]E] struct {
	*mock.Call
}

// DeleteMany is a helper method to define mock.On call
//   - ctx
//   - filter
func (_e *MockMongoRepository_Expecter[ID, E, T]) DeleteMany(ctx interface{}, filter interface{}) *MockMongoRepository_DeleteMany_Call[ID, E, T] {
	return &MockMongoRepository_DeleteMany_Call[ID, E, T]{Call: _e.mock.On("DeleteMany", ctx, filter)}
}

func (_c *MockMongoRepository_DeleteMany_Call[ID, E, T]) Run(run func(ctx context.Context, filter interface{})) *MockMongoRepository_DeleteMany_Call[ID, E, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockMongoRepository_DeleteMany_Call[ID, E, T]) Return(err error) *MockMongoRepository_DeleteMany_Call[ID, E, T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMongoRepository_DeleteMany_Call[ID, E, T]) RunAndReturn(run func(ctx context.Context, filter interface{}) error) *MockMongoRepository_DeleteMany_Call[ID, E, T] {
	_c.Call.Return(run)
	return _c
}

// FindMany provides a mock function for the type MockMongoRepository
func (_mock *MockMongoRepository[ID, E, T]) FindMany(ctx context.Context, filter interface{}) (T, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindMany")
	}

	var r0 T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}) (T, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}) T); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMongoRepository_FindMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMany'
type MockMongoRepository_FindMany_Call[ID any, E Entity[ID], T ~[]E] struct {
	*mock.Call
}

// FindMany is a helper method to define mock.On call
//   - ctx
//   - filter
func (_e *MockMongoRepository_Expecter[ID, E, T]) FindMany(ctx interface{}, filter interface{}) *MockMongoRepository_FindMany_Call[ID, E, T] {
	return &MockMongoRepository_FindMany_Call[ID, E, T]{Call: _e.mock.On("FindMany", ctx, filter)}
}

func (_c *MockMongoRepository_FindMany_Call[ID, E, T]) Run(run func(ctx context.Context, filter interface{})) *MockMongoRepository_FindMany_Call[ID, E, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockMongoRepository_FindMany_Call[ID, E, T]) Return(v T, err error) *MockMongoRepository_FindMany_Call[ID, E, T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockMongoRepository_FindMany_Call[ID, E, T]) RunAndReturn(run func(ctx context.Context, filter interface{}) (T, error)) *MockMongoRepository_FindMany_Call[ID, E, T] {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function for the type MockMongoRepository
func (_mock *MockMongoRepository[ID, E, T]) FindOne(ctx context.Context, filter interface{}) (E, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 E
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}) (E, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}) E); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(E)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMongoRepository_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockMongoRepository_FindOne_Call[ID any, E Entity[ID], T ~[]E] struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx
//   - filter
func (_e *MockMongoRepository_Expecter[ID, E, T]) FindOne(ctx interface{}, filter interface{}) *MockMongoRepository_FindOne_Call[ID, E, T] {
	return &MockMongoRepository_FindOne_Call[ID, E, T]{Call: _e.mock.On("FindOne", ctx, filter)}
}

func (_c *MockMongoRepository_FindOne_Call[ID, E, T]) Run(run func(ctx context.Context, filter interface{})) *MockMongoRepository_FindOne_Call[ID, E, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockMongoRepository_FindOne_Call[ID, E, T]) Return(v E, err error) *MockMongoRepository_FindOne_Call[ID, E, T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockMongoRepository_FindOne_Call[ID, E, T]) RunAndReturn(run func(ctx context.Context, filter interface{}) (E, error)) *MockMongoRepository_FindOne_Call[ID, E, T] {
	_c.Call.Return(run)
	return _c
}

// GetClient provides a mock function for the type MockMongoRepository
func (_mock *MockMongoRepository[ID, E, T]) GetClient() *mongo.Client {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 *mongo.Client
	if returnFunc, ok := ret.Get(0).(func() *mongo.Client); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Client)
		}
	}
	return r0
}

// MockMongoRepository_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type MockMongoRepository_GetClient_Call[ID any, E Entity[ID], T ~[]E] struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
func (_e *MockMongoRepository_Expecter[ID, E, T]) GetClient() *MockMongoRepository_GetClient_Call[ID, E, T] {
	return &MockMongoRepository_GetClient_Call[ID, E, T]{Call: _e.mock.On("GetClient")}
}

func (_c *MockMongoRepository_GetClient_Call[ID, E, T]) Run(run func()) *MockMongoRepository_GetClient_Call[ID, E, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMongoRepository_GetClient_Call[ID, E, T]) Return(client *mongo.Client) *MockMongoRepository_GetClient_Call[ID, E, T] {
	_c.Call.Return(client)
	return _c
}

func (_c *MockMongoRepository_GetClient_Call[ID, E, T]) RunAndReturn(run func() *mongo.Client) *MockMongoRepository_GetClient_Call[ID, E, T] {
	_c.Call.Return(run)
	return _c
}

// GetDatabase provides a mock function for the type MockMongoRepository
func (_mock *MockMongoRepository[ID, E, T]) GetDatabase() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDatabase")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockMongoRepository_GetDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabase'
type MockMongoRepository_GetDatabase_Call[ID any, E Entity[ID], T ~[]E] struct {
	*mock.Call
}

// GetDatabase is a helper method to define mock.On call
func (_e *MockMongoRepository_Expecter[ID, E, T]) GetDatabase() *MockMongoRepository_GetDatabase_Call[ID, E, T] {
	return &MockMongoRepository_GetDatabase_Call[ID, E, T]{Call: _e.mock.On("GetDatabase")}
}

func (_c *MockMongoRepository_GetDatabase_Call[ID, E, T]) Run(run func()) *MockMongoRepository_GetDatabase_Call[ID, E, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMongoRepository_GetDatabase_Call[ID, E, T]) Return(s string) *MockMongoRepository_GetDatabase_Call[ID, E, T] {
	_c.Call.Return(s)
	return _c
}

func (_c *MockMongoRepository_GetDatabase_Call[ID, E, T]) RunAndReturn(run func() string) *MockMongoRepository_GetDatabase_Call[ID, E, T] {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockMongoRepository
func (_mock *MockMongoRepository[ID, E, T]) Update(ctx context.Context, e E, update interface{}) error {
	ret := _mock.Called(ctx, e, update)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, E, interface{}) error); ok {
		r0 = returnFunc(ctx, e, update)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMongoRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockMongoRepository_Update_Call[ID any, E Entity[ID], T ~[]E] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - e
//   - update
func (_e *MockMongoRepository_Expecter[ID, E, T]) Update(ctx interface{}, e interface{}, update interface{}) *MockMongoRepository_Update_Call[ID, E, T] {
	return &MockMongoRepository_Update_Call[ID, E, T]{Call: _e.mock.On("Update", ctx, e, update)}
}

func (_c *MockMongoRepository_Update_Call[ID, E, T]) Run(run func(ctx context.Context, e E, update interface{})) *MockMongoRepository_Update_Call[ID, E, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(E), args[2].(interface{}))
	})
	return _c
}

func (_c *MockMongoRepository_Update_Call[ID, E, T]) Return(err error) *MockMongoRepository_Update_Call[ID, E, T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMongoRepository_Update_Call[ID, E, T]) RunAndReturn(run func(ctx context.Context, e E, update interface{}) error) *MockMongoRepository_Update_Call[ID, E, T] {
	_c.Call.Return(run)
	return _c
}
