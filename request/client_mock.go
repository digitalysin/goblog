// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package request

import (
	"io"
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockClient
func (_mock *MockClient) Delete(url string, headers http.Header) (*http.Response, error) {
	ret := _mock.Called(url, headers)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, http.Header) (*http.Response, error)); ok {
		return returnFunc(url, headers)
	}
	if returnFunc, ok := ret.Get(0).(func(string, http.Header) *http.Response); ok {
		r0 = returnFunc(url, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, http.Header) error); ok {
		r1 = returnFunc(url, headers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - url
//   - headers
func (_e *MockClient_Expecter) Delete(url interface{}, headers interface{}) *MockClient_Delete_Call {
	return &MockClient_Delete_Call{Call: _e.mock.On("Delete", url, headers)}
}

func (_c *MockClient_Delete_Call) Run(run func(url string, headers http.Header)) *MockClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.Header))
	})
	return _c
}

func (_c *MockClient_Delete_Call) Return(response *http.Response, err error) *MockClient_Delete_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockClient_Delete_Call) RunAndReturn(run func(url string, headers http.Header) (*http.Response, error)) *MockClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Do provides a mock function for the type MockClient
func (_mock *MockClient) Do(req *http.Request) (*http.Response, error) {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*http.Request) (*http.Response, error)); ok {
		return returnFunc(req)
	}
	if returnFunc, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = returnFunc(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = returnFunc(req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockClient_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - req
func (_e *MockClient_Expecter) Do(req interface{}) *MockClient_Do_Call {
	return &MockClient_Do_Call{Call: _e.mock.On("Do", req)}
}

func (_c *MockClient_Do_Call) Run(run func(req *http.Request)) *MockClient_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockClient_Do_Call) Return(response *http.Response, err error) *MockClient_Do_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockClient_Do_Call) RunAndReturn(run func(req *http.Request) (*http.Response, error)) *MockClient_Do_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockClient
func (_mock *MockClient) Get(url string, headers http.Header) (*http.Response, error) {
	ret := _mock.Called(url, headers)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, http.Header) (*http.Response, error)); ok {
		return returnFunc(url, headers)
	}
	if returnFunc, ok := ret.Get(0).(func(string, http.Header) *http.Response); ok {
		r0 = returnFunc(url, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, http.Header) error); ok {
		r1 = returnFunc(url, headers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - url
//   - headers
func (_e *MockClient_Expecter) Get(url interface{}, headers interface{}) *MockClient_Get_Call {
	return &MockClient_Get_Call{Call: _e.mock.On("Get", url, headers)}
}

func (_c *MockClient_Get_Call) Run(run func(url string, headers http.Header)) *MockClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.Header))
	})
	return _c
}

func (_c *MockClient_Get_Call) Return(response *http.Response, err error) *MockClient_Get_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockClient_Get_Call) RunAndReturn(run func(url string, headers http.Header) (*http.Response, error)) *MockClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function for the type MockClient
func (_mock *MockClient) Patch(url string, body io.Reader, headers http.Header) (*http.Response, error) {
	ret := _mock.Called(url, body, headers)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, io.Reader, http.Header) (*http.Response, error)); ok {
		return returnFunc(url, body, headers)
	}
	if returnFunc, ok := ret.Get(0).(func(string, io.Reader, http.Header) *http.Response); ok {
		r0 = returnFunc(url, body, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, io.Reader, http.Header) error); ok {
		r1 = returnFunc(url, body, headers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockClient_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - url
//   - body
//   - headers
func (_e *MockClient_Expecter) Patch(url interface{}, body interface{}, headers interface{}) *MockClient_Patch_Call {
	return &MockClient_Patch_Call{Call: _e.mock.On("Patch", url, body, headers)}
}

func (_c *MockClient_Patch_Call) Run(run func(url string, body io.Reader, headers http.Header)) *MockClient_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(io.Reader), args[2].(http.Header))
	})
	return _c
}

func (_c *MockClient_Patch_Call) Return(response *http.Response, err error) *MockClient_Patch_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockClient_Patch_Call) RunAndReturn(run func(url string, body io.Reader, headers http.Header) (*http.Response, error)) *MockClient_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Post provides a mock function for the type MockClient
func (_mock *MockClient) Post(url string, body io.Reader, headers http.Header) (*http.Response, error) {
	ret := _mock.Called(url, body, headers)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, io.Reader, http.Header) (*http.Response, error)); ok {
		return returnFunc(url, body, headers)
	}
	if returnFunc, ok := ret.Get(0).(func(string, io.Reader, http.Header) *http.Response); ok {
		r0 = returnFunc(url, body, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, io.Reader, http.Header) error); ok {
		r1 = returnFunc(url, body, headers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type MockClient_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - url
//   - body
//   - headers
func (_e *MockClient_Expecter) Post(url interface{}, body interface{}, headers interface{}) *MockClient_Post_Call {
	return &MockClient_Post_Call{Call: _e.mock.On("Post", url, body, headers)}
}

func (_c *MockClient_Post_Call) Run(run func(url string, body io.Reader, headers http.Header)) *MockClient_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(io.Reader), args[2].(http.Header))
	})
	return _c
}

func (_c *MockClient_Post_Call) Return(response *http.Response, err error) *MockClient_Post_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockClient_Post_Call) RunAndReturn(run func(url string, body io.Reader, headers http.Header) (*http.Response, error)) *MockClient_Post_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockClient
func (_mock *MockClient) Put(url string, body io.Reader, headers http.Header) (*http.Response, error) {
	ret := _mock.Called(url, body, headers)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, io.Reader, http.Header) (*http.Response, error)); ok {
		return returnFunc(url, body, headers)
	}
	if returnFunc, ok := ret.Get(0).(func(string, io.Reader, http.Header) *http.Response); ok {
		r0 = returnFunc(url, body, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, io.Reader, http.Header) error); ok {
		r1 = returnFunc(url, body, headers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockClient_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - url
//   - body
//   - headers
func (_e *MockClient_Expecter) Put(url interface{}, body interface{}, headers interface{}) *MockClient_Put_Call {
	return &MockClient_Put_Call{Call: _e.mock.On("Put", url, body, headers)}
}

func (_c *MockClient_Put_Call) Run(run func(url string, body io.Reader, headers http.Header)) *MockClient_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(io.Reader), args[2].(http.Header))
	})
	return _c
}

func (_c *MockClient_Put_Call) Return(response *http.Response, err error) *MockClient_Put_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockClient_Put_Call) RunAndReturn(run func(url string, body io.Reader, headers http.Header) (*http.Response, error)) *MockClient_Put_Call {
	_c.Call.Return(run)
	return _c
}
