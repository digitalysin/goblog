// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package db

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockORM creates a new instance of MockORM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockORM(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockORM {
	mock := &MockORM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockORM is an autogenerated mock type for the ORM type
type MockORM struct {
	mock.Mock
}

type MockORM_Expecter struct {
	mock *mock.Mock
}

func (_m *MockORM) EXPECT() *MockORM_Expecter {
	return &MockORM_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function for the type MockORM
func (_mock *MockORM) Begin() ORM {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 ORM
	if returnFunc, ok := ret.Get(0).(func() ORM); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ORM)
		}
	}
	return r0
}

// MockORM_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type MockORM_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *MockORM_Expecter) Begin() *MockORM_Begin_Call {
	return &MockORM_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *MockORM_Begin_Call) Run(run func()) *MockORM_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockORM_Begin_Call) Return(oRM ORM) *MockORM_Begin_Call {
	_c.Call.Return(oRM)
	return _c
}

func (_c *MockORM_Begin_Call) RunAndReturn(run func() ORM) *MockORM_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockORM
func (_mock *MockORM) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockORM_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockORM_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockORM_Expecter) Close() *MockORM_Close_Call {
	return &MockORM_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockORM_Close_Call) Run(run func()) *MockORM_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockORM_Close_Call) Return(err error) *MockORM_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockORM_Close_Call) RunAndReturn(run func() error) *MockORM_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function for the type MockORM
func (_mock *MockORM) Commit() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockORM_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockORM_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *MockORM_Expecter) Commit() *MockORM_Commit_Call {
	return &MockORM_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *MockORM_Commit_Call) Run(run func()) *MockORM_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockORM_Commit_Call) Return(err error) *MockORM_Commit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockORM_Commit_Call) RunAndReturn(run func() error) *MockORM_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockORM
func (_mock *MockORM) Create(args interface{}) error {
	ret := _mock.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = returnFunc(args)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockORM_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockORM_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - args
func (_e *MockORM_Expecter) Create(args interface{}) *MockORM_Create_Call {
	return &MockORM_Create_Call{Call: _e.mock.On("Create", args)}
}

func (_c *MockORM_Create_Call) Run(run func(args interface{})) *MockORM_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockORM_Create_Call) Return(err error) *MockORM_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockORM_Create_Call) RunAndReturn(run func(args interface{}) error) *MockORM_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockORM
func (_mock *MockORM) Delete(model interface{}, args ...interface{}) error {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(model, args)
	} else {
		tmpRet = _mock.Called(model)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = returnFunc(model, args...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockORM_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockORM_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - model
//   - args
func (_e *MockORM_Expecter) Delete(model interface{}, args ...interface{}) *MockORM_Delete_Call {
	return &MockORM_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{model}, args...)...)}
}

func (_c *MockORM_Delete_Call) Run(run func(model interface{}, args ...interface{})) *MockORM_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockORM_Delete_Call) Return(err error) *MockORM_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockORM_Delete_Call) RunAndReturn(run func(model interface{}, args ...interface{}) error) *MockORM_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function for the type MockORM
func (_mock *MockORM) Error() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockORM_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockORM_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *MockORM_Expecter) Error() *MockORM_Error_Call {
	return &MockORM_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *MockORM_Error_Call) Run(run func()) *MockORM_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockORM_Error_Call) Return(err error) *MockORM_Error_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockORM_Error_Call) RunAndReturn(run func() error) *MockORM_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function for the type MockORM
func (_mock *MockORM) Exec(query string, args ...interface{}) ORM {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(query, args)
	} else {
		tmpRet = _mock.Called(query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 ORM
	if returnFunc, ok := ret.Get(0).(func(string, ...interface{}) ORM); ok {
		r0 = returnFunc(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ORM)
		}
	}
	return r0
}

// MockORM_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockORM_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - query
//   - args
func (_e *MockORM_Expecter) Exec(query interface{}, args ...interface{}) *MockORM_Exec_Call {
	return &MockORM_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{query}, args...)...)}
}

func (_c *MockORM_Exec_Call) Run(run func(query string, args ...interface{})) *MockORM_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockORM_Exec_Call) Return(oRM ORM) *MockORM_Exec_Call {
	_c.Call.Return(oRM)
	return _c
}

func (_c *MockORM_Exec_Call) RunAndReturn(run func(query string, args ...interface{}) ORM) *MockORM_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function for the type MockORM
func (_mock *MockORM) Find(object interface{}) error {
	ret := _mock.Called(object)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = returnFunc(object)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockORM_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockORM_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - object
func (_e *MockORM_Expecter) Find(object interface{}) *MockORM_Find_Call {
	return &MockORM_Find_Call{Call: _e.mock.On("Find", object)}
}

func (_c *MockORM_Find_Call) Run(run func(object interface{})) *MockORM_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockORM_Find_Call) Return(err error) *MockORM_Find_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockORM_Find_Call) RunAndReturn(run func(object interface{}) error) *MockORM_Find_Call {
	_c.Call.Return(run)
	return _c
}

// First provides a mock function for the type MockORM
func (_mock *MockORM) First(object interface{}) error {
	ret := _mock.Called(object)

	if len(ret) == 0 {
		panic("no return value specified for First")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = returnFunc(object)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockORM_First_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'First'
type MockORM_First_Call struct {
	*mock.Call
}

// First is a helper method to define mock.On call
//   - object
func (_e *MockORM_Expecter) First(object interface{}) *MockORM_First_Call {
	return &MockORM_First_Call{Call: _e.mock.On("First", object)}
}

func (_c *MockORM_First_Call) Run(run func(object interface{})) *MockORM_First_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockORM_First_Call) Return(err error) *MockORM_First_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockORM_First_Call) RunAndReturn(run func(object interface{}) error) *MockORM_First_Call {
	_c.Call.Return(run)
	return _c
}

// Joins provides a mock function for the type MockORM
func (_mock *MockORM) Joins(assoc string) ORM {
	ret := _mock.Called(assoc)

	if len(ret) == 0 {
		panic("no return value specified for Joins")
	}

	var r0 ORM
	if returnFunc, ok := ret.Get(0).(func(string) ORM); ok {
		r0 = returnFunc(assoc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ORM)
		}
	}
	return r0
}

// MockORM_Joins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Joins'
type MockORM_Joins_Call struct {
	*mock.Call
}

// Joins is a helper method to define mock.On call
//   - assoc
func (_e *MockORM_Expecter) Joins(assoc interface{}) *MockORM_Joins_Call {
	return &MockORM_Joins_Call{Call: _e.mock.On("Joins", assoc)}
}

func (_c *MockORM_Joins_Call) Run(run func(assoc string)) *MockORM_Joins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockORM_Joins_Call) Return(oRM ORM) *MockORM_Joins_Call {
	_c.Call.Return(oRM)
	return _c
}

func (_c *MockORM_Joins_Call) RunAndReturn(run func(assoc string) ORM) *MockORM_Joins_Call {
	_c.Call.Return(run)
	return _c
}

// Last provides a mock function for the type MockORM
func (_mock *MockORM) Last(object interface{}) error {
	ret := _mock.Called(object)

	if len(ret) == 0 {
		panic("no return value specified for Last")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = returnFunc(object)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockORM_Last_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Last'
type MockORM_Last_Call struct {
	*mock.Call
}

// Last is a helper method to define mock.On call
//   - object
func (_e *MockORM_Expecter) Last(object interface{}) *MockORM_Last_Call {
	return &MockORM_Last_Call{Call: _e.mock.On("Last", object)}
}

func (_c *MockORM_Last_Call) Run(run func(object interface{})) *MockORM_Last_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockORM_Last_Call) Return(err error) *MockORM_Last_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockORM_Last_Call) RunAndReturn(run func(object interface{}) error) *MockORM_Last_Call {
	_c.Call.Return(run)
	return _c
}

// Limit provides a mock function for the type MockORM
func (_mock *MockORM) Limit(limit int64) ORM {
	ret := _mock.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for Limit")
	}

	var r0 ORM
	if returnFunc, ok := ret.Get(0).(func(int64) ORM); ok {
		r0 = returnFunc(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ORM)
		}
	}
	return r0
}

// MockORM_Limit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Limit'
type MockORM_Limit_Call struct {
	*mock.Call
}

// Limit is a helper method to define mock.On call
//   - limit
func (_e *MockORM_Expecter) Limit(limit interface{}) *MockORM_Limit_Call {
	return &MockORM_Limit_Call{Call: _e.mock.On("Limit", limit)}
}

func (_c *MockORM_Limit_Call) Run(run func(limit int64)) *MockORM_Limit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockORM_Limit_Call) Return(oRM ORM) *MockORM_Limit_Call {
	_c.Call.Return(oRM)
	return _c
}

func (_c *MockORM_Limit_Call) RunAndReturn(run func(limit int64) ORM) *MockORM_Limit_Call {
	_c.Call.Return(run)
	return _c
}

// Model provides a mock function for the type MockORM
func (_mock *MockORM) Model(value interface{}) ORM {
	ret := _mock.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for Model")
	}

	var r0 ORM
	if returnFunc, ok := ret.Get(0).(func(interface{}) ORM); ok {
		r0 = returnFunc(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ORM)
		}
	}
	return r0
}

// MockORM_Model_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Model'
type MockORM_Model_Call struct {
	*mock.Call
}

// Model is a helper method to define mock.On call
//   - value
func (_e *MockORM_Expecter) Model(value interface{}) *MockORM_Model_Call {
	return &MockORM_Model_Call{Call: _e.mock.On("Model", value)}
}

func (_c *MockORM_Model_Call) Run(run func(value interface{})) *MockORM_Model_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockORM_Model_Call) Return(oRM ORM) *MockORM_Model_Call {
	_c.Call.Return(oRM)
	return _c
}

func (_c *MockORM_Model_Call) RunAndReturn(run func(value interface{}) ORM) *MockORM_Model_Call {
	_c.Call.Return(run)
	return _c
}

// Offset provides a mock function for the type MockORM
func (_mock *MockORM) Offset(offset int64) ORM {
	ret := _mock.Called(offset)

	if len(ret) == 0 {
		panic("no return value specified for Offset")
	}

	var r0 ORM
	if returnFunc, ok := ret.Get(0).(func(int64) ORM); ok {
		r0 = returnFunc(offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ORM)
		}
	}
	return r0
}

// MockORM_Offset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Offset'
type MockORM_Offset_Call struct {
	*mock.Call
}

// Offset is a helper method to define mock.On call
//   - offset
func (_e *MockORM_Expecter) Offset(offset interface{}) *MockORM_Offset_Call {
	return &MockORM_Offset_Call{Call: _e.mock.On("Offset", offset)}
}

func (_c *MockORM_Offset_Call) Run(run func(offset int64)) *MockORM_Offset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockORM_Offset_Call) Return(oRM ORM) *MockORM_Offset_Call {
	_c.Call.Return(oRM)
	return _c
}

func (_c *MockORM_Offset_Call) RunAndReturn(run func(offset int64) ORM) *MockORM_Offset_Call {
	_c.Call.Return(run)
	return _c
}

// OmitAssoc provides a mock function for the type MockORM
func (_mock *MockORM) OmitAssoc() ORM {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for OmitAssoc")
	}

	var r0 ORM
	if returnFunc, ok := ret.Get(0).(func() ORM); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ORM)
		}
	}
	return r0
}

// MockORM_OmitAssoc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OmitAssoc'
type MockORM_OmitAssoc_Call struct {
	*mock.Call
}

// OmitAssoc is a helper method to define mock.On call
func (_e *MockORM_Expecter) OmitAssoc() *MockORM_OmitAssoc_Call {
	return &MockORM_OmitAssoc_Call{Call: _e.mock.On("OmitAssoc")}
}

func (_c *MockORM_OmitAssoc_Call) Run(run func()) *MockORM_OmitAssoc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockORM_OmitAssoc_Call) Return(oRM ORM) *MockORM_OmitAssoc_Call {
	_c.Call.Return(oRM)
	return _c
}

func (_c *MockORM_OmitAssoc_Call) RunAndReturn(run func() ORM) *MockORM_OmitAssoc_Call {
	_c.Call.Return(run)
	return _c
}

// Order provides a mock function for the type MockORM
func (_mock *MockORM) Order(value interface{}) ORM {
	ret := _mock.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for Order")
	}

	var r0 ORM
	if returnFunc, ok := ret.Get(0).(func(interface{}) ORM); ok {
		r0 = returnFunc(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ORM)
		}
	}
	return r0
}

// MockORM_Order_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Order'
type MockORM_Order_Call struct {
	*mock.Call
}

// Order is a helper method to define mock.On call
//   - value
func (_e *MockORM_Expecter) Order(value interface{}) *MockORM_Order_Call {
	return &MockORM_Order_Call{Call: _e.mock.On("Order", value)}
}

func (_c *MockORM_Order_Call) Run(run func(value interface{})) *MockORM_Order_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockORM_Order_Call) Return(oRM ORM) *MockORM_Order_Call {
	_c.Call.Return(oRM)
	return _c
}

func (_c *MockORM_Order_Call) RunAndReturn(run func(value interface{}) ORM) *MockORM_Order_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockORM
func (_mock *MockORM) Ping() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockORM_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockORM_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *MockORM_Expecter) Ping() *MockORM_Ping_Call {
	return &MockORM_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *MockORM_Ping_Call) Run(run func()) *MockORM_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockORM_Ping_Call) Return(err error) *MockORM_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockORM_Ping_Call) RunAndReturn(run func() error) *MockORM_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Preload provides a mock function for the type MockORM
func (_mock *MockORM) Preload(assoc string) ORM {
	ret := _mock.Called(assoc)

	if len(ret) == 0 {
		panic("no return value specified for Preload")
	}

	var r0 ORM
	if returnFunc, ok := ret.Get(0).(func(string) ORM); ok {
		r0 = returnFunc(assoc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ORM)
		}
	}
	return r0
}

// MockORM_Preload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Preload'
type MockORM_Preload_Call struct {
	*mock.Call
}

// Preload is a helper method to define mock.On call
//   - assoc
func (_e *MockORM_Expecter) Preload(assoc interface{}) *MockORM_Preload_Call {
	return &MockORM_Preload_Call{Call: _e.mock.On("Preload", assoc)}
}

func (_c *MockORM_Preload_Call) Run(run func(assoc string)) *MockORM_Preload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockORM_Preload_Call) Return(oRM ORM) *MockORM_Preload_Call {
	_c.Call.Return(oRM)
	return _c
}

func (_c *MockORM_Preload_Call) RunAndReturn(run func(assoc string) ORM) *MockORM_Preload_Call {
	_c.Call.Return(run)
	return _c
}

// Raw provides a mock function for the type MockORM
func (_mock *MockORM) Raw(query string, args ...interface{}) ORM {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(query, args)
	} else {
		tmpRet = _mock.Called(query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Raw")
	}

	var r0 ORM
	if returnFunc, ok := ret.Get(0).(func(string, ...interface{}) ORM); ok {
		r0 = returnFunc(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ORM)
		}
	}
	return r0
}

// MockORM_Raw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Raw'
type MockORM_Raw_Call struct {
	*mock.Call
}

// Raw is a helper method to define mock.On call
//   - query
//   - args
func (_e *MockORM_Expecter) Raw(query interface{}, args ...interface{}) *MockORM_Raw_Call {
	return &MockORM_Raw_Call{Call: _e.mock.On("Raw",
		append([]interface{}{query}, args...)...)}
}

func (_c *MockORM_Raw_Call) Run(run func(query string, args ...interface{})) *MockORM_Raw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockORM_Raw_Call) Return(oRM ORM) *MockORM_Raw_Call {
	_c.Call.Return(oRM)
	return _c
}

func (_c *MockORM_Raw_Call) RunAndReturn(run func(query string, args ...interface{}) ORM) *MockORM_Raw_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type MockORM
func (_mock *MockORM) Rollback() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockORM_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockORM_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
func (_e *MockORM_Expecter) Rollback() *MockORM_Rollback_Call {
	return &MockORM_Rollback_Call{Call: _e.mock.On("Rollback")}
}

func (_c *MockORM_Rollback_Call) Run(run func()) *MockORM_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockORM_Rollback_Call) Return(err error) *MockORM_Rollback_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockORM_Rollback_Call) RunAndReturn(run func() error) *MockORM_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// Scan provides a mock function for the type MockORM
func (_mock *MockORM) Scan(object interface{}) error {
	ret := _mock.Called(object)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = returnFunc(object)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockORM_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockORM_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - object
func (_e *MockORM_Expecter) Scan(object interface{}) *MockORM_Scan_Call {
	return &MockORM_Scan_Call{Call: _e.mock.On("Scan", object)}
}

func (_c *MockORM_Scan_Call) Run(run func(object interface{})) *MockORM_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockORM_Scan_Call) Return(err error) *MockORM_Scan_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockORM_Scan_Call) RunAndReturn(run func(object interface{}) error) *MockORM_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function for the type MockORM
func (_mock *MockORM) Select(query interface{}, args ...interface{}) ORM {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(query, args)
	} else {
		tmpRet = _mock.Called(query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 ORM
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...interface{}) ORM); ok {
		r0 = returnFunc(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ORM)
		}
	}
	return r0
}

// MockORM_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type MockORM_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - query
//   - args
func (_e *MockORM_Expecter) Select(query interface{}, args ...interface{}) *MockORM_Select_Call {
	return &MockORM_Select_Call{Call: _e.mock.On("Select",
		append([]interface{}{query}, args...)...)}
}

func (_c *MockORM_Select_Call) Run(run func(query interface{}, args ...interface{})) *MockORM_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockORM_Select_Call) Return(oRM ORM) *MockORM_Select_Call {
	_c.Call.Return(oRM)
	return _c
}

func (_c *MockORM_Select_Call) RunAndReturn(run func(query interface{}, args ...interface{}) ORM) *MockORM_Select_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockORM
func (_mock *MockORM) Set(key string, value interface{}) ORM {
	ret := _mock.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 ORM
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) ORM); ok {
		r0 = returnFunc(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ORM)
		}
	}
	return r0
}

// MockORM_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockORM_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key
//   - value
func (_e *MockORM_Expecter) Set(key interface{}, value interface{}) *MockORM_Set_Call {
	return &MockORM_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *MockORM_Set_Call) Run(run func(key string, value interface{})) *MockORM_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockORM_Set_Call) Return(oRM ORM) *MockORM_Set_Call {
	_c.Call.Return(oRM)
	return _c
}

func (_c *MockORM_Set_Call) RunAndReturn(run func(key string, value interface{}) ORM) *MockORM_Set_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockORM
func (_mock *MockORM) Update(args interface{}) error {
	ret := _mock.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = returnFunc(args)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockORM_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockORM_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - args
func (_e *MockORM_Expecter) Update(args interface{}) *MockORM_Update_Call {
	return &MockORM_Update_Call{Call: _e.mock.On("Update", args)}
}

func (_c *MockORM_Update_Call) Run(run func(args interface{})) *MockORM_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockORM_Update_Call) Return(err error) *MockORM_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockORM_Update_Call) RunAndReturn(run func(args interface{}) error) *MockORM_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateColumns provides a mock function for the type MockORM
func (_mock *MockORM) UpdateColumns(args interface{}) error {
	ret := _mock.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateColumns")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = returnFunc(args)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockORM_UpdateColumns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateColumns'
type MockORM_UpdateColumns_Call struct {
	*mock.Call
}

// UpdateColumns is a helper method to define mock.On call
//   - args
func (_e *MockORM_Expecter) UpdateColumns(args interface{}) *MockORM_UpdateColumns_Call {
	return &MockORM_UpdateColumns_Call{Call: _e.mock.On("UpdateColumns", args)}
}

func (_c *MockORM_UpdateColumns_Call) Run(run func(args interface{})) *MockORM_UpdateColumns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockORM_UpdateColumns_Call) Return(err error) *MockORM_UpdateColumns_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockORM_UpdateColumns_Call) RunAndReturn(run func(args interface{}) error) *MockORM_UpdateColumns_Call {
	_c.Call.Return(run)
	return _c
}

// Where provides a mock function for the type MockORM
func (_mock *MockORM) Where(query interface{}, args ...interface{}) ORM {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(query, args)
	} else {
		tmpRet = _mock.Called(query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Where")
	}

	var r0 ORM
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...interface{}) ORM); ok {
		r0 = returnFunc(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ORM)
		}
	}
	return r0
}

// MockORM_Where_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Where'
type MockORM_Where_Call struct {
	*mock.Call
}

// Where is a helper method to define mock.On call
//   - query
//   - args
func (_e *MockORM_Expecter) Where(query interface{}, args ...interface{}) *MockORM_Where_Call {
	return &MockORM_Where_Call{Call: _e.mock.On("Where",
		append([]interface{}{query}, args...)...)}
}

func (_c *MockORM_Where_Call) Run(run func(query interface{}, args ...interface{})) *MockORM_Where_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockORM_Where_Call) Return(oRM ORM) *MockORM_Where_Call {
	_c.Call.Return(oRM)
	return _c
}

func (_c *MockORM_Where_Call) RunAndReturn(run func(query interface{}, args ...interface{}) ORM) *MockORM_Where_Call {
	_c.Call.Return(run)
	return _c
}

// WithContext provides a mock function for the type MockORM
func (_mock *MockORM) WithContext(ctx context.Context) ORM {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 ORM
	if returnFunc, ok := ret.Get(0).(func(context.Context) ORM); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ORM)
		}
	}
	return r0
}

// MockORM_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type MockORM_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - ctx
func (_e *MockORM_Expecter) WithContext(ctx interface{}) *MockORM_WithContext_Call {
	return &MockORM_WithContext_Call{Call: _e.mock.On("WithContext", ctx)}
}

func (_c *MockORM_WithContext_Call) Run(run func(ctx context.Context)) *MockORM_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockORM_WithContext_Call) Return(oRM ORM) *MockORM_WithContext_Call {
	_c.Call.Return(oRM)
	return _c
}

func (_c *MockORM_WithContext_Call) RunAndReturn(run func(ctx context.Context) ORM) *MockORM_WithContext_Call {
	_c.Call.Return(run)
	return _c
}
